# Data marts are the final models, and often a join between multiple data sources so we name them by their type: facts (fct) or dimensions (dim)
#Fact tables capture the quantitative essence of business events – sales, clicks, shipments. Dimension tables provide the crucial context – who, what, where, when
version: 2

models:
  - name: fct_sender_rewards
    description: >
      Model with only the auctions where we have a setlement and the solver addresses
    data_tests:
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["tx_hash", "auction_id"]    
    columns:
      - name: auction_id
        description: we should only have one winner per auction, otherwise it means that multiple solvers settled! 
        data_tests:
          - unique:
              severity: warn
      - name: batch_reward
        description: either a positive, null or negative reward associated with the auction and the solver
        data_tests: 
          - not_null
  - name: fct_data_per_trade
    description: >
      Data for each trades that can not be derived from onchain information. 
      A trade is an execution of an order. There are partially fillable orders, so one order can be executed in multiple times.
      It is also the name of the trade events that are on-chain.
      network_fee_amount and other amounts are in the token (not WEI)
      TODO Tests: 
       - tx_hash and order_uid unique combo.
       - protocol_fee_amount should not be above 1 percent of buy amount for buy order or sell amount of sell order (in the trades table for amounts, and type of order in the order table)
       - network_fee_amount * network_fee_price should not be below minus 10e12 WEI
       - if there is a partner_fee, there should always be a protocol_fee
       - order_uid, tx_hash, auction_id, block_number, solver, network_fee_amount, network_fee_price not null
    data_tests:
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["tx_hash", "order_uid"]
          severity: warn
  - name: fct_data_per_solution
    description: > 
      Data for each auction and solution that has actually been settled. 
      Most of the time, an auction_id should only have one tx_hash, but it could be that a solver settled when he should not (then is_winner is false)
      and we might want in the future to allow for multiple solutions per auction.
      We can use this table as a basis to know which solver to pay or penalise, 
      as well as the protocol feess, networks fees, execution costs (still TODO), slippage, and weather a service fee has to be charged.
    data_tests:
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["tx_hash", "auction_id"] 
          severity: warn  
    columns: 
      - name: auction_id
        description: we should only have one winner per auction, otherwise it means that multiple solvers settled!
        data_tests:
          - unique:
              severity: warn
      - name: block_number
        data_tests: 
          - not_null
      - name: block_deadline
        data_tests: 
          - not_null
      - name: tx_hash   
        data_tests: 
          - not_null
      - name: solver
        data_tests: 
          - not_null    
      - name: uncapped_payment_eth
      - name: capped_payment_eth
      - name: is_winner
        description: if false, then a solver settled when he should not have, so we send a warning!
        data_tests:
          - accepted_values:
              values:
                - true
              severity: warn
      - name: winning_score
      - name: reference_score 
      - name: is_settled_in_time
      - name: reward_target
        data_tests: 
          - not_null    
      - name: solver_name
      - name: protocol_fee
      - name: network_fee
      - name: slippage_wei
      - name: slippage_usd
      - name: service_fee
