# These models are simply to join the barn and prod datsets. 
# todo more description about these datasets

version: 2

models:
  - name: stg_backend_data__app_data
  - name: stg_backend_data__auction_prices
  - name: stg_backend_data__fee_policies
  - name: stg_backend_data__jit_orders
  - name: stg_backend_data__order_quotes
  - name: stg_backend_data__orders
  - name: stg_backend_data__settlement_observations
  - name: stg_backend_data__settlement_scores
  - name: stg_backend_data__trades
    description: >
      The prod and the barn tables seem to both have the same trades. 
      TODO: check with Felix that this is the right solution: 
      Therefore, the data is deduplicated taking the prod row as a priority 
      if it exists both in prod and barn
  - name: stg_backend_data__competition_auctions2 #todo change this back to stg_backend_data__competition_auctions 
  - name: stg_backend_data__proposed_solutions
    columns:
      - name: solver
        description: here we transform the solver to match the dune data
  - name: stg_backend_data__settlements
    columns:
      - name: solver
        description: here we transform the solver to match the dune data
      - name: tx_hash
        data_tests:
          - not_null
  - name: stg_backend_data__order_execution
    descriptino: TODO, should we add the protocol_fee_tokens?? and if so, how to clean this column?
    data_tests:
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["auction_id", "order_uid"]
          severity: warn