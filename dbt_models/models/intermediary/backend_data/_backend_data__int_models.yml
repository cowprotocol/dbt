version: 2

models:
  - name: int_backend_data__settlements_in_time
    description: >
      Includes all the auctions from the competition_auction table (so normally all of our auctions).
      We add two new columns that indicate if the auction is settled (tx_has exists) and if it is settled on time.
      We include a grace period (see model code for the exact amount)
    columns:
      - name: environment
        data_tests:
          - not_null:
              severity: warn

  - name: int_backend_data__two_highest_scores
    description: > 
      Model that simply adds two new columns to the proposed solutions:
      One with the max score for that auction, 
      and one with the second highest score for the aution (or 0 if it does not exist).
      All the auctions and their associated proposed solutions are still present.
      In case the logic for calculating the reward for the auction changes and is not
      based solely on the two highest scores for the auction, then we need to change this model.
    columns:
      - name: environment
        data_tests:
          - not_null:
              severity: warn  
  - name: int_backend_data__reward_calculation
    description: For each auction, we calculate the final rewards, wethere the auction is settled or not, on time or not. 
      The reward is only given if the solver settled on time and if they were declared the winner, otherwise they are penalised.
    columns:
      - name: environment
        data_tests:
          - not_null:
              severity: warn  
  - name: int_backend_data__trade_with_tx_hash
    description: >
      For each trade/order_uid we have the corresponding transaction hash. 
      One or many trades happen in a block, then later there is a settlement (then there can be or not another trade and another settlement and so on).
    data_tests:
      - assert_always_smaller_than:
          smaller_column: trade_log_index
          bigger_column: settlement_log_index
    columns:
      - name: environment
        data_tests:
          - not_null:
              severity: warn
  - name: int_backend_data__orders_with_winning_quotes
    description: > 
      selection of all the order uids that have winning quotes. We can sum them per solver to get the quote rewards later.
      ask Felix TODO if it is normal to have so little order uids with winning quotes
    columns:
      - name: environment
        data_tests:
          - not_null:
              severity: warn  
  - name: int_backend_data__order_data
    description: >
      join between the order and jit order tables. 
    columns:
      - name: environment
        data_tests:
          - not_null:
              severity: warn  

  - name: int_backend_data__trade_data_unprocessed
    description: >
      Joins settlents, settlements scores, trades, order data, order executino, and app data! 
      Purpose: have a list of all trades and have additional info.
      This could be by first setting up a trades table with unique
      Then gets order information (what tokens are traded)
      Then add info about the trade (amounts traded, related to execution, protocol fee thhat was charged)
      Then info about the settlement (execution costs, auction id, tx hash)
    data_tests:
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["auction_id", "order_uid"]
          severity: warn
    columns:
      - name: environment
        data_tests:
          - not_null:
              severity: warn  
  - name: int_backend_data__trade_data_processed_with_native_prices
    columns:  
      - name: environment
        data_tests:
          - not_null:
              severity: warn
  - name: int_backend_data__trade_data_processed
    columns:  
      - name: environment
        data_tests:
          - not_null:
              severity: warn
  - name: int_backend_data__protocol_fee_type
    description: >
      all rows where we have a protocol fee type.
      The protocol fee is the smallest application_order and partner_fee is largest. This is why we keep the first row only.
    data_tests:  
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["auction_id", "order_uid"] 
    columns: 
      - name: protocol_fee_type
        description: In barn environment sometimes this value is equal to volume. This looks like it is resulting from testing in barn. In prod this should never be the case. 
      - name: environment
        data_tests:
          - not_null:
              severity: warn
  - name: int_backend_data__price_data
    columns:
      - name: surplus_token_native_price
        data_tests:
          - not_null:
              severity: warn
      - name: network_fee_token_native_price
        data_tests:
          - not_null:
              severity: warn
      - name: environment
        data_tests:
          - not_null:
              severity: warn
  - name : int_backend_data__settlements_execution_costs
    columns: 
      - name: environment
        data_tests:
          - not_null:
              severity: warn