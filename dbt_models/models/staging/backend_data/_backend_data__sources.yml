version: 2

sources:  
  - name: backend_data_aurelie  
    schema: aurelie
    description: > 
      This is a temporary source that needs to be replaced by the actual data dump (like for the temp_backend_db_dump schema).
      This data is temporarily under the schema aurelie because I did not have write access to the temp_backend_db_dump schema
      when doing a partial data synch from the backend db to the analytics db with dune synch v2.
      The following tests get errors because the data is not complete and we expect the errors to dissapear once we integrate dbt to dagster (check with Felix H):
      - Warning in test not_null_int_backend_data__settlements_in_time_environment (models/intermediary/backend_data/_backend_data__int_models.yml). Got 9 results, configured to warn if != 0
      - Warning in test not_null_int_backend_data__reward_calculation_environment (models/intermediary/backend_data/_backend_data__int_models.yml). Got 9 results, configured to warn if != 0
      - Warning in test not_null_int_backend_data__price_data_network_fee_token_native_price (models/intermediary/backend_data/_backend_data__int_models.yml). Got 1 result, configured to warn if != 0
      - Warning in test not_null_int_backend_data__price_data_surplus_token_native_price (models/intermediary/backend_data/_backend_data__int_models.yml). Got 1 result, configured to warn if != 0
      - Warning in test dbt_expectations_expect_column_values_to_not_be_null_fct_data_per_trade_protocol_fee_price (models/marts/_models.yml). Got 1 result, configured to warn if != 0 
      -  Warning in test relationships_stg_backend_data__trades_order_uid__order_uid__ref_fct_data_per_trade_ (models/staging/backend_data/barn_and_prod_union/_barn_and_prod_union__stg_models.yml). Got 28 results, configured to warn if != 0
    tables:
      - name: backend_data_prod__trades
        description: Contains the different trades for each block
      - name: backend_data_barn__trades
        description: same as the prod data but from the barn (staging) backend database
      - name: backend_data_prod__orders
      - name: backend_data_barn__orders
      - name: backend_data_prod__jit_orders
      - name: backend_data_barn__jit_orders
      - name: backend_data_prod__order_quotes
      - name: backend_data_barn__order_quotes
      - name: backend_data_prod__order_execution
      - name: backend_data_barn__order_execution
      - name: backend_data_prod__app_data
      - name: backend_data_barn__app_data
      - name: backend_data_prod__settlement_scores
      - name: backend_data_barn__settlement_scores
      - name: backend_data_prod__settlement_observations
      - name: backend_data_barn__settlement_observations
      - name: backend_data_prod__auction_prices
      - name: backend_data_barn__auction_prices
      - name: backend_data_prod__fee_policies
      - name: backend_data_barn__fee_policies
      - name: backend_data_prod__competition_auctions
      - name: backend_data_barn__competition_auctions
        description: Contains the deadline (in block number) for each auction_id
      - name: backend_data_prod__proposed_solutions
        description: >
          table computed by the autopilot listing all the proposed solution of the solvers.
          We also which solver won for each auction and the score of each proposed solution.
        data_tests:
          - dbt_expectations.expect_compound_columns_to_be_unique:
              column_list: ["auction_id", "uid"]
        columns:
          - name: auction_id
            data_tests:
              - not_null
          - name: uid
            description: the id of the proposed solution
            data_tests:
              - not_null
          - name: solver
            data_tests:
              - not_null
          - name: score
            data_tests:
              - not_null
          - name: is_winner          
      - name: backend_data_barn__proposed_solutions
      - name: backend_data_prod__settlements
        description: >
          For each auction, we know who (solver) settled the auction, how (tx_hash), and when (block_number)
        columns:
          - name: auction_id
            data_tests:
              - not_null
          - name: tx_hash
            data_tests:
              - not_null
          - name: solver
            data_tests:
              - not_null
          - name: block_number
            data_tests:
              - not_null   
      - name: backend_data_barn__settlements
